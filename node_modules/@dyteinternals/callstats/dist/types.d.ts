export interface IceServerInfo {
    urls: string;
    username: string;
    credential?: string;
    /**
     * Note(ravindra-dyte):
     * credentialType is deprecated.
     * https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/credentialType
     */
    credentialType?: 'password';
}
export interface RegionalIceInformation {
    regionId: string;
    iceServers: IceServerInfo[];
}
export declare enum BrowserTypes {
    CHROMIUM = "chromum",
    FIREFOX = "firefox",
    SAFARI = "safari"
}
export declare enum ClientEnvType {
    DEV = "dev",
    STAGING = "staging",
    PRODUCTION = "production"
}
export declare type ClientEnvTypeAll = 'dev' | 'staging' | 'production';
export declare enum MediaDeviceType {
    AUDIO = "AUDIO",
    VIDEO = "VIDEO",
    SPEAKER = "SPEAKER"
}
export declare type MediaDeviceTypeAll = keyof typeof MediaDeviceType;
export interface DeviceInfo {
    isMobile: boolean;
    browserName: string;
    browserVersion: string;
    osName: string;
    osVersionName: string;
    engineName: string;
    userAgent: string;
    cpus: number;
    memory: number;
    webglSupport?: number;
}
export interface PeerMetaData {
    metaData: Object;
    deviceInfo: DeviceInfo;
    displayName: string;
    meetingEnv?: string;
    peerId: string;
    userId: string;
    clientSpecificId?: string;
    roomName: string;
    roomUUID: string;
    permissions: Object;
    participantRole?: string;
    roomViewType: string;
}
export declare enum PermissionEnum {
    INIT = 0,
    ACCEPTED = 1,
    DENIED = 2,
    SYS_DENIED = 3,
    FAILED = 4,
    NOTFOUND = 5,
    NOT_APPLICABLE = 6
}
export interface InhouseCallStatsInitializeParams {
    peerId: string;
    engineName: string;
    env?: ClientEnvTypeAll;
    iceServers: any[];
    apiBase?: string;
    flags: {
        ingestionLayerDetails: 'ALL' | 'SQS' | 'INGESTION';
    };
    logger?: DyteLogger;
}
/**
 * Note(ravindra-dyte):
 * This is redundantly added here to avoid circular dependency on web-core build
 *   */
export declare type LogData = {
    [key: string]: string | number | boolean | null | undefined | LogData;
};
export declare interface DyteLogger {
    info(humanReadableLogIdentifier: string, logData?: LogData, isCrucial?: boolean): void;
    error(humanReadableLogIdentifier: string, logData?: LogData, isCrucial?: boolean): void;
    debug(humanReadableLogIdentifier: string, logData?: LogData, isCrucial?: boolean): void;
    log(humanReadableLogIdentifier: string, logData?: LogData, isCrucial?: boolean): void;
    warn(humanReadableLogIdentifier: string, logData?: LogData, isCrucial?: boolean): void;
}
