import { types as MediaSoup } from '@dytesdk/mediasoup-client';
import { Measurements, ParsedRTCStats, ParsedConsumerStats } from './measurements';
import * as MeasurementTypes from '../measurements/types';
export default class FirefoxMeasurements extends Measurements {
    producerMap: Map<string, MediaSoup.Producer>;
    consumerMap: Map<string, MediaSoup.Consumer>;
    registerProducer(producer: MediaSoup.Producer): Promise<void>;
    registerConsumer(consumer: MediaSoup.Consumer): Promise<void>;
    generateConsumerStreamMap(consumer: MediaSoup.Consumer, parse?: boolean): Promise<MeasurementTypes.ConsumerStatistics>;
    deregisterProducer(producer: MediaSoup.Producer): void;
    deregisterConsumer(consumer: MediaSoup.Consumer): void;
    protected parseRTCReport(report: RTCStatsReport, filters?: string[], onceOnly?: boolean, ownerId?: string, transportInfo?: {
        id: string;
        producing: boolean;
        consuming: boolean;
    }): ParsedRTCStats;
    protected getProducerStatsFromReport(report: ParsedRTCStats): MeasurementTypes.ProducerStatistics[];
    protected getConsumerStatsFromParsedConsumerStats(report: ParsedRTCStats, stats: ParsedConsumerStats, consumerId: string): MeasurementTypes.ConsumerStatistics;
    protected getConsumerStatsFromReport(report: ParsedRTCStats): MeasurementTypes.ConsumerStatistics[];
}
