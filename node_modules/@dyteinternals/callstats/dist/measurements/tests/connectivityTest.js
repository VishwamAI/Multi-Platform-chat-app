import { CallTest, SimpleCallTest } from './callTest';
export default class ConnectivityTest extends SimpleCallTest {
    ch1;
    ch2;
    constructor(config, filter = CallTest.noFilter) {
        super(config);
        this.call.setIceCandidateFilter(filter);
        const ch1 = this.call.pc1.createDataChannel(null);
        this.ch1 = ch1;
        ch1.addEventListener('open', () => {
            ch1.send('hello');
        });
        ch1.addEventListener('message', this.onCh1Recieve.bind(this));
        this.call.pc2.addEventListener('datachannel', this.dataChannelHandler.bind(this));
    }
    onCh1Recieve(event) {
        if (event.data !== 'world') {
            this.hangup('Invalid data transmitted.');
        }
        else {
            // console.log('Data successfully transmitted between peers.');
            this.testComplete({
                connectivity: true,
            });
        }
    }
    onCh2Recieve(event) {
        if (event.data !== 'hello') {
            this.hangup('Invalid data transmitted.');
        }
        else {
            try {
                this.ch2.send('world');
                // eslint-disable-next-line no-empty
            }
            catch {
            }
        }
    }
    dataChannelHandler(event) {
        const ch2 = event.channel;
        this.ch2 = ch2;
        ch2.addEventListener('message', this.onCh2Recieve.bind(this));
    }
    hangup(errorMessage) {
        this.testFailed(errorMessage);
    }
}
export class HostConnectivityTest extends ConnectivityTest {
    constructor(config) {
        super(config, CallTest.isHost);
    }
}
export class RelayConnectivityTest extends ConnectivityTest {
    constructor(config) {
        super(config, CallTest.isRelay);
    }
}
export class ReflexiveConnectivityTest extends ConnectivityTest {
    constructor(config) {
        super(config, CallTest.isReflexive);
    }
}
