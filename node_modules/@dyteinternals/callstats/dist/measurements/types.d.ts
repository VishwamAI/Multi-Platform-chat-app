export interface DeviceInfo {
    isMobile: boolean;
    browserName: string;
    browserVersion: string;
    osName: string;
    osVersionName: string;
    engineName: string;
    userAgent: string;
    cpus: number;
    memory?: number;
    webglSupport?: number;
}
export interface GeoLocation {
    coords: {
        latitude: number;
        longitude: number;
    };
}
export interface IPDetails {
    ip: string;
    city: string;
    region: string;
    country: string;
    loc: string | GeoLocation;
    org: string;
    portal: string;
    timezone: string;
}
export interface ThroughputInformation {
    throughput: number;
    fractionalLoss: number;
    RTT: number;
    jitter: number;
    backendRTT: number;
}
export interface IceConnectivity {
    host: boolean;
    relay: boolean;
    reflexive: boolean;
}
export interface NetworkQualityInformation extends ThroughputInformation {
    connectivity: IceConnectivity;
}
export interface NetworkInformation extends NetworkQualityInformation {
    ipDetails: IPDetails;
    location: GeoLocation;
    turnConnectivity: boolean;
    effectiveNetworkType: string;
}
export interface ConnectivityInformation {
    connectivity: boolean;
}
declare type RTCDtlsTransportState = 'closed' | 'connected' | 'connecting' | 'failed' | 'new';
declare type RTCIceRole = 'controlled' | 'controlling' | 'unknown';
export interface VideoStreamStats {
    frameHeight: number;
    frameWidth: number;
    droppedFrames?: number;
    framerateMean?: number;
    framesDropped: number;
    framesPerSecond: number;
    firCount: number;
}
export interface AudioStreamStats {
}
export interface InboundStreamStats {
    bytesReceived: number;
    packetsReceived: number;
    packetsLost: number;
    jitter: number;
    nackCount: number;
}
export interface RemoteInboundStreamStats {
    jitter: number;
    fractionLost: number;
    roundTripTime: number;
    roundTripTimeMeasurements: number;
    totalRoundTripTime: number;
    packetsLost: number;
    localId?: string;
}
export interface OutboundStreamStats {
    bytesSent: number;
    packetsSent: number;
    retransmittedBytesSent?: number;
    retransmittedPacketsSent?: number;
    remoteData?: RemoteInboundStreamStats;
    nackCount: number;
}
export interface InboundVideoStreamStats extends VideoStreamStats, InboundStreamStats {
    framesDecoded: number;
    keyFramesDecoded: number;
    framesReceived: number;
    decoderImplementation: string;
}
export interface QualityLimitationDurations {
    bandwidth: number;
    cpu: number;
    none: number;
    other: number;
}
export interface OutboundVideoStreamStats extends VideoStreamStats, OutboundStreamStats {
    hugeFramesSent: number;
    pliCount: number;
    qpSum: number;
    framesEncoded: number;
    framesSent: number;
    keyFramesEncoded: number;
    encoderImplementation: string;
    qualityLimitationReason: string;
    qualityLimitationResolutionChanges: number;
    qualityLimitationDurations: QualityLimitationDurations;
    totalEncodeTime: number;
    targetBitrate?: number;
    totalPacketSendDelay: number;
}
export interface InboundAudioStreamStats extends AudioStreamStats, InboundStreamStats {
    audioLevel: number;
    concealedSampels: number;
    concealmentEvents: number;
    jitterBufferDelay: number;
    jitterBufferEmittedCount: number;
    totalAudioEnergy: number;
    totalSamplesDuration: number;
    totalSamplesReceived: number;
}
export interface OutboundAudioStreamStats extends AudioStreamStats, OutboundStreamStats {
}
export interface IceCandidatePairStats {
    bytesReceived?: number;
    bytesSent?: number;
    currentRoundTripTime?: number;
    totalRoundTripTime?: number;
    availableOutgoingBitrate?: number;
}
export interface WebRtcTransportStat {
    bytesReceived?: number;
    bytesSent?: number;
    roundTripTime?: number;
    totalRoundTripTime?: number;
    availableOutgoingBitrate?: number;
    dtlsCipher?: string;
    dtlsState?: RTCDtlsTransportState;
    iceRole?: RTCIceRole;
    packetsReceived?: number;
    packetsSent?: number;
}
export interface TransportStatistics extends Object {
    transportId: string;
    consuming: boolean;
    producing: boolean;
    stats: WebRtcTransportStat;
}
export interface ProducerStatistics extends Object {
    producerId: string;
    videoStats: OutboundVideoStreamStats[];
    audioStats: OutboundAudioStreamStats[];
    appData?: {
        screenShare?: boolean;
        supportsRemoteControl?: boolean;
    };
}
export interface ConsumerStatistics extends Object {
    consumerId: string;
    peerId: string;
    producerId: string;
    videoStats: InboundVideoStreamStats[];
    audioStats: InboundAudioStreamStats[];
}
export interface ProcessedStatsReport {
    transportReport: TransportStatistics;
    producerReport: ProducerStatistics[];
    consumerReport: ConsumerStatistics[];
}
export {};
