/// <reference types="node" />
import EventEmitter from 'events';
import { types as Mediasoup } from '@dytesdk/mediasoup-client';
import { IceServerInfo, RegionalIceInformation, PermissionEnum, PeerMetaData, MediaDeviceTypeAll, InhouseCallStatsInitializeParams, DyteLogger } from './types';
import CallStats from './callStats';
declare class InhouseCallStats extends EventEmitter {
    stats: any;
    roomURL: string;
    peerId: string;
    backend: CallStats;
    iceServers: IceServerInfo[];
    initialized: boolean;
    stalled: boolean;
    ipInformation: Object;
    logger: DyteLogger;
    initialize({ peerId, engineName, env, iceServers, apiBase, flags, logger, }: InhouseCallStatsInitializeParams): Promise<void>;
    setRoomName(roomName: string): void;
    configureSendTransport(sendTransport: Mediasoup.Transport | any): void;
    configureRecvTransport(recvTransport: Mediasoup.Transport | any): void;
    candidateRegionalNetworkQualityTest(regionalIceServersInfo: RegionalIceInformation[]): Promise<void>;
    roomJoined(peerData: PeerMetaData): Promise<void>;
    audioOff(): void;
    audioOn(): void;
    videoOff(): void;
    videoOn(): void;
    callEnded(): void;
    screenShareStart(ssrc: number): void;
    consumerSharedMediaState(consumerId: string, statusObj: {
        audio?: boolean;
        video?: boolean;
        screen?: boolean;
    }): void;
    screenShareStop(ssrc: number): void;
    screenShareRequested(): void;
    activeSpeaker(peerId: string): void;
    devices(deviceType: MediaDeviceTypeAll, deviceList: MediaDeviceInfo[]): void;
    selectedDevice(deviceType: MediaDeviceTypeAll, device: MediaDeviceInfo): void;
    mediaPermission(deviceType: MediaDeviceTypeAll, permission: PermissionEnum): void;
    mediaPlaybackFailed(deviceType: MediaDeviceTypeAll): void;
    mediaTrackMuted(deviceType: MediaDeviceTypeAll): void;
    tabChanged(isMeetingsTabActive?: boolean): void;
    browserBackgrounded(): void;
    browserForegrounded(): void;
    legacySwitch(on: boolean): void;
    startPreCallTest(): Promise<void>;
    onPreCallTestResults(fx: any): any;
    onReceivingConsumerAudioStatus(fx: any): void;
    onReceivingConsumerVideoStatus(fx: any): void;
    onReceivingProducerAudioStatus(fx: any): void;
    onReceivingProducerVideoStatus(fx: any): void;
    onReceivingProducingTransportStatus(fx: any): void;
    onReceivingConsumingTransportStatus(fx: any): void;
    onSafeInitialization(cb: any): (ipInfo: any) => void;
    removeInitializationListener(fx: Function): void;
    stallCallStats(): void;
}
declare const callStats: InhouseCallStats;
export default callStats;
export declare function createCallStatsInstance(): InhouseCallStats;
