/// <reference types="node" />
import { types as MediaSoup } from '@dytesdk/mediasoup-client';
import * as EventTypes from './events/types';
import EventHandler from './events/events';
import * as Types from './types';
import { MediaDeviceTypeAll } from './types';
import * as Measurements from './measurements/measurements';
import * as MeasurementTypes from './measurements/types';
import { AuthPayload } from './connectors/protocols/types';
export default class CallStats {
    eventHandler: EventHandler;
    protected measurements: Measurements.Measurements;
    protected producingTransport: MediaSoup.Transport;
    protected consumingTransport: MediaSoup.Transport;
    producers: Map<string, MediaSoup.Producer>;
    protected consumers: Map<string, MediaSoup.Consumer>;
    protected iceServers: Types.IceServerInfo[];
    protected connectionInfoPromise: Promise<MeasurementTypes.NetworkInformation>;
    protected pingStatsTimeout: NodeJS.Timeout;
    logger: Types.DyteLogger;
    protected env: Types.ClientEnvTypeAll;
    peerId: string;
    consumerSharedMediaStatesMap: Map<string, {
        audio?: boolean;
        video?: boolean;
        screen?: boolean;
    }>;
    currentUserMediaStates: {
        audio?: boolean;
        video?: boolean;
        screen?: boolean;
    };
    constructor(backendUrl: string, engineName: string, env: Types.ClientEnvTypeAll, flags: Types.InhouseCallStatsInitializeParams['flags'], logger: Types.DyteLogger, peerId: string);
    authenticate(authPayload: AuthPayload): void;
    registerIceServers(servers: Types.IceServerInfo[]): void;
    protected registerConsumer(consumer: MediaSoup.Consumer): void;
    protected registerProducer(producer: MediaSoup.Producer): void;
    sendConsumerSharedMediaStateEvent(consumerId: string, statusObj: {
        audio?: boolean;
        video?: boolean;
        screen?: boolean;
    }): void;
    registerProducingTransport(transport: MediaSoup.Transport): void;
    registerConsumingTransport(transport: MediaSoup.Transport): void;
    protected deRegisterConsumer(consumer: MediaSoup.Consumer): void;
    protected deRegisterProducer(producer: MediaSoup.Producer): void;
    disconnectConsumingTransport(): void;
    disconnectProducingTransport(): void;
    protected callEvent(entry: EventTypes.EventEntry): void;
    sendPreCallTestBeginEvent(): void;
    sendScreenShareToggleEvent(on: boolean, ssrc: number): void;
    sendScreenShareRequestedEvent(): void;
    sendActiveSpeakerEvent(peerId: string): void;
    devices(deviceType: MediaDeviceTypeAll, deviceList: MediaDeviceInfo[]): void;
    selectedDevice(deviceType: MediaDeviceTypeAll, device: MediaDeviceInfo): void;
    mediaPermission(deviceType: MediaDeviceTypeAll, permission: any): void;
    mediaPlaybackFailed(deviceType: MediaDeviceTypeAll): void;
    mediaTrackMuted(deviceType: MediaDeviceTypeAll): void;
    tabChanged(isMeetingsTabActive: boolean): void;
    browserBackgrounded(): void;
    browserForegrounded(): void;
    legacySwitch(on: boolean): void;
    getPreCallTestResults(): Promise<MeasurementTypes.NetworkInformation>;
    sendCallJoinBeginEvent(peerMetaData: EventTypes.PeerMetaData): void;
    sendNetworkQualityTestBeginEvent(regionalInformations: Types.RegionalIceInformation[]): void;
    sendWebSocketConnectedEvent(): void;
    sendTransportConnectedEvent(): void;
    sendAudioToggleEvent(on: boolean): void;
    sendVideoToggleEvent(on: boolean): void;
    sendParticipantRoleToggleEvent(role: EventTypes.ParticipantRoleData): void;
    startPingStats(interval?: number): void;
    stopPingStats(): void;
    sendPingStatsEvent(optimize?: boolean): Promise<void>;
    sendDisconnectEvent(): void;
    sendReconnectEvent(): void;
}
