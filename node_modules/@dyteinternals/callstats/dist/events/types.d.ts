import * as MeasurementTypes from '../measurements/types';
import * as MajorTypes from '../types';
import { MediaDeviceTypeAll } from '../types';
export declare enum EventCategory {
    MAJOR_EVENT = 0,
    MINOR_EVENT = 1
}
export declare enum Event {
    PRECALL_TEST_BEGIN = "precall_begin",
    PRECALL_TEST_COMPLETE = "precall_end",
    CALL_JOIN_BEGIN = "call_join",
    NET_QUALITY_TEST_BEGIN = "net_quality_test_begin",
    NET_QUALITY_TEST_END = "net_quality_test_end",
    WEBSOCKET_CONNECTED = "websocket_connected",
    TRANSPORT_CONNECTED = "transport_connected",
    AUDIO_ON = "audio_on",
    AUDIO_OFF = "audio_off",
    VIDEO_ON = "video_on",
    VIDEO_OFF = "video_off",
    PARTICIPANT_ROLE = "participant_role",
    PING_STAT = "ping_stat",
    DISCONNECT = "disconnect",
    RECONNECT_ATTEMPT = "reconnect_attempt",
    SCREENSHARE_START_REQUESTED = "screenshare_start_requested",
    SCREENSHARE_STARTED = "screenshare_started",
    SCREENSHARE_STOPPED = "screenshare_stopped",
    TAB_CHANGE = "tab_change",
    BROWSER_BACKGROUNDED = "browser_backgrounded",
    BROWSER_FOREGROUNDED = "browser_foregrounded",
    DOMINANT_SPEAKER = "dominant_speaker",
    AUDIO_DEVICES_UPDATES = "audio_devices_updates",
    VIDEO_DEVICES_UPDATES = "video_devices_updates",
    SPEAKER_DEVICES_UPDATES = "speaker_devices_updates",
    SELECTED_MICROHPONE_UPDATE = "selected_microphone_update",
    SELECTED_CAMERA_UPDATE = "selected_camera_update",
    SELECTED_SPEAKER_UPDATE = "selected_speaker_update",
    MEDIA_PERMISSION = "camera_permission",
    LEGACY_SWITCH = "legacy_switch",
    AUDIO_PLAY_FAILED = "audio_play_failed",
    VIDEO_PLAY_FAILED = "video_play_failed",
    AUDIO_TRACK_MUTED = "audio_track_muted",
    VIDEO_TRACK_MUTED = "video_track_muted"
}
export declare const EventCategoryMap: Map<Event, EventCategory>;
export interface PeerMetaData {
    metaData: Object;
    deviceInfo: MeasurementTypes.DeviceInfo;
    displayName: string;
    meetingEnv?: string;
    peerId: string;
    userId: string;
    clientSpecificId?: string;
    roomName: string;
    roomUUID: string;
    permissions: Object;
    participantRole?: string;
    roomViewType: string;
}
export interface EventDataBase extends Object {
}
export interface CallJoinData extends EventDataBase {
    peerMetaData: PeerMetaData;
}
export interface PingStatsData extends EventDataBase {
    producingTransportStats?: MeasurementTypes.TransportStatistics;
    consumingTransportStats?: MeasurementTypes.TransportStatistics;
    producerStats?: MeasurementTypes.ProducerStatistics[];
    consumerStats?: MeasurementTypes.ConsumerStatistics[];
}
export interface PreCallTestData extends EventDataBase {
    connectionInfo?: MeasurementTypes.NetworkInformation;
}
export interface RegionalNetworkQualityTestData extends MajorTypes.RegionalIceInformation {
    networkResults: MeasurementTypes.NetworkQualityInformation;
}
export interface NetworkQualityTestData extends EventDataBase {
    regionData: RegionalNetworkQualityTestData[];
}
export interface ParticipantRoleData extends EventDataBase {
    participantRole: string;
}
export interface EmptyData extends EventDataBase {
}
export interface MediaDevicesData extends EventDataBase {
    deviceList: MediaDeviceInfo[];
}
export declare type EventData = CallJoinData | PingStatsData | NetworkQualityTestData | EmptyData | ParticipantRoleData | ParticipantRoleData | MediaDevicesData;
export interface EventEntryBase {
    event: Event;
    timestamp: Date;
    metaData?: EventData;
}
export interface PreCallTestBeginEntry extends EventEntryBase {
    event: Event.PRECALL_TEST_BEGIN;
}
export interface PreCallTestCompletedEntry extends EventEntryBase {
    event: Event.PRECALL_TEST_COMPLETE;
    metaData: PreCallTestData;
}
export interface CallJoinBeginEntry extends EventEntryBase {
    event: Event.CALL_JOIN_BEGIN;
    metaData: CallJoinData;
}
export interface NetworkQualityTestBeginEntry extends EventEntryBase {
    event: Event.NET_QUALITY_TEST_BEGIN;
}
export interface NetworkQualityTestEndEntry extends EventEntryBase {
    event: Event.NET_QUALITY_TEST_END;
    metaData: NetworkQualityTestData;
}
export interface WebSocketConnectedEntry extends EventEntryBase {
    event: Event.WEBSOCKET_CONNECTED;
}
export interface TransportConnectedEntry extends EventEntryBase {
    event: Event.TRANSPORT_CONNECTED;
}
export interface AudioToggleEntry extends EventEntryBase {
    event: Event.AUDIO_OFF | Event.AUDIO_ON;
}
export interface VideoToggleEntry extends EventEntryBase {
    event: Event.VIDEO_OFF | Event.VIDEO_ON;
}
export interface ScreenShareToggleEntry extends EventEntryBase {
    event: Event.SCREENSHARE_STARTED | Event.SCREENSHARE_STOPPED;
    metaData: {
        ssrc: number;
    };
}
export interface ScreenShareRequestedEntry extends EventEntryBase {
    event: Event.SCREENSHARE_START_REQUESTED;
}
export interface DominantSpeakerEntry extends EventEntryBase {
    event: Event.DOMINANT_SPEAKER;
    metaData: {
        peerId: string;
    };
}
export interface DevicesEntry extends EventEntryBase {
    event: Event.AUDIO_DEVICES_UPDATES | Event.VIDEO_DEVICES_UPDATES | Event.SPEAKER_DEVICES_UPDATES;
    metaData: MediaDevicesData;
}
export interface SelectedDeviceEntry extends EventEntryBase {
    event: Event.SELECTED_CAMERA_UPDATE | Event.SELECTED_MICROHPONE_UPDATE | Event.SELECTED_SPEAKER_UPDATE;
    metaData: {
        device: MediaDeviceInfo;
    };
}
export interface MediaPermissionEntry extends EventEntryBase {
    event: Event.MEDIA_PERMISSION;
    metaData: {
        deviceType: MediaDeviceTypeAll;
        permission: any;
    };
}
export interface MediaPlaybackFailureEntry extends EventEntryBase {
    event: Event.AUDIO_PLAY_FAILED | Event.VIDEO_PLAY_FAILED;
    metaData: {
        deviceType: MediaDeviceTypeAll;
    };
}
export interface MediaTrackFailureEntry extends EventEntryBase {
    event: Event.AUDIO_TRACK_MUTED | Event.VIDEO_TRACK_MUTED;
    metaData: {
        deviceType: MediaDeviceTypeAll;
    };
}
export interface TabChangeEntry extends EventEntryBase {
    event: Event.TAB_CHANGE;
    metaData: {
        isMeetingsTabActive: boolean;
    };
}
export interface BrowserBackgroundedEntry extends EventEntryBase {
    event: Event.BROWSER_BACKGROUNDED;
}
export interface BrowserForegroundedEntry extends EventEntryBase {
    event: Event.BROWSER_FOREGROUNDED;
}
export interface LegacySwitchEntry extends EventEntryBase {
    event: Event.LEGACY_SWITCH;
    metadata: {
        on: boolean;
    };
}
export interface ParticipantRoleToggleEntry extends EventEntryBase {
    event: Event.PARTICIPANT_ROLE;
    metaData: ParticipantRoleData;
}
export interface PingStatsEntry extends EventEntryBase {
    event: Event.PING_STAT;
    metaData: PingStatsData;
}
export interface DisconnectEntry extends EventEntryBase {
    event: Event.DISCONNECT;
}
export interface ReconnectEntry extends EventEntryBase {
    event: Event.RECONNECT_ATTEMPT;
}
export declare type EventEntry = CallJoinBeginEntry | NetworkQualityTestBeginEntry | NetworkQualityTestEndEntry | BrowserForegroundedEntry | PingStatsEntry | PreCallTestBeginEntry | PreCallTestCompletedEntry | WebSocketConnectedEntry | TransportConnectedEntry | AudioToggleEntry | VideoToggleEntry | ScreenShareToggleEntry | DisconnectEntry | ReconnectEntry | ParticipantRoleToggleEntry | DominantSpeakerEntry | DevicesEntry | SelectedDeviceEntry | MediaPermissionEntry | MediaPlaybackFailureEntry | MediaTrackFailureEntry | ScreenShareRequestedEntry | TabChangeEntry | BrowserBackgroundedEntry | LegacySwitchEntry;
export interface EventChunk extends Object {
    entries: EventEntry[];
}
export declare function mergeChunks(chunks: EventChunk[]): EventChunk;
