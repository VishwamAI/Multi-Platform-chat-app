import EventEmitter from 'events';
import * as EventTypes from './types';
export class EventStore {
    currentChunk;
    flushedChunks;
    constructor() {
        this.currentChunk = {
            entries: [],
        };
        this.flushedChunks = [];
    }
    add(entry) {
        this.currentChunk.entries.push(entry);
    }
    flush() {
        const chunk = this.currentChunk;
        this.currentChunk = {
            entries: [],
        };
        this.flushedChunks.push(chunk);
        return chunk;
    }
}
export default class EventHandler extends EventEmitter {
    connection;
    eventStore;
    constructor(connection) {
        super();
        this.connection = connection;
        this.eventStore = new EventStore();
    }
    callEvent(entry) {
        // console.log("EVENT: ", entry);
        entry.timestamp = new Date();
        this.eventStore.add(entry);
        this.emit(entry.event, entry.metaData);
        if (EventTypes.EventCategoryMap.get(entry.event) === EventTypes.EventCategory.MAJOR_EVENT) {
            const chunk = this.eventStore.flush();
            this.connection.sendChunk(chunk);
        }
    }
}
