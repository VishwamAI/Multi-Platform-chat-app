export var EventCategory;
(function (EventCategory) {
    EventCategory[EventCategory["MAJOR_EVENT"] = 0] = "MAJOR_EVENT";
    EventCategory[EventCategory["MINOR_EVENT"] = 1] = "MINOR_EVENT";
})(EventCategory || (EventCategory = {}));
export var Event;
(function (Event) {
    Event["PRECALL_TEST_BEGIN"] = "precall_begin";
    Event["PRECALL_TEST_COMPLETE"] = "precall_end";
    Event["CALL_JOIN_BEGIN"] = "call_join";
    Event["NET_QUALITY_TEST_BEGIN"] = "net_quality_test_begin";
    Event["NET_QUALITY_TEST_END"] = "net_quality_test_end";
    Event["WEBSOCKET_CONNECTED"] = "websocket_connected";
    Event["TRANSPORT_CONNECTED"] = "transport_connected";
    Event["AUDIO_ON"] = "audio_on";
    Event["AUDIO_OFF"] = "audio_off";
    Event["VIDEO_ON"] = "video_on";
    Event["VIDEO_OFF"] = "video_off";
    Event["PARTICIPANT_ROLE"] = "participant_role";
    Event["PING_STAT"] = "ping_stat";
    Event["DISCONNECT"] = "disconnect";
    Event["RECONNECT_ATTEMPT"] = "reconnect_attempt";
    Event["SCREENSHARE_START_REQUESTED"] = "screenshare_start_requested";
    Event["SCREENSHARE_STARTED"] = "screenshare_started";
    Event["SCREENSHARE_STOPPED"] = "screenshare_stopped";
    Event["TAB_CHANGE"] = "tab_change";
    Event["BROWSER_BACKGROUNDED"] = "browser_backgrounded";
    Event["BROWSER_FOREGROUNDED"] = "browser_foregrounded";
    Event["DOMINANT_SPEAKER"] = "dominant_speaker";
    Event["AUDIO_DEVICES_UPDATES"] = "audio_devices_updates";
    Event["VIDEO_DEVICES_UPDATES"] = "video_devices_updates";
    Event["SPEAKER_DEVICES_UPDATES"] = "speaker_devices_updates";
    Event["SELECTED_MICROHPONE_UPDATE"] = "selected_microphone_update";
    Event["SELECTED_CAMERA_UPDATE"] = "selected_camera_update";
    Event["SELECTED_SPEAKER_UPDATE"] = "selected_speaker_update";
    Event["MEDIA_PERMISSION"] = "camera_permission";
    Event["LEGACY_SWITCH"] = "legacy_switch";
    Event["AUDIO_PLAY_FAILED"] = "audio_play_failed";
    Event["VIDEO_PLAY_FAILED"] = "video_play_failed";
    Event["AUDIO_TRACK_MUTED"] = "audio_track_muted";
    Event["VIDEO_TRACK_MUTED"] = "video_track_muted";
})(Event || (Event = {}));
export const EventCategoryMap = new Map([
    [Event.PRECALL_TEST_BEGIN, EventCategory.MINOR_EVENT],
    [Event.PRECALL_TEST_COMPLETE, EventCategory.MINOR_EVENT],
    [Event.CALL_JOIN_BEGIN, EventCategory.MAJOR_EVENT],
    [Event.NET_QUALITY_TEST_BEGIN, EventCategory.MINOR_EVENT],
    [Event.NET_QUALITY_TEST_END, EventCategory.MINOR_EVENT],
    [Event.WEBSOCKET_CONNECTED, EventCategory.MINOR_EVENT],
    [Event.TRANSPORT_CONNECTED, EventCategory.MAJOR_EVENT],
    [Event.AUDIO_ON, EventCategory.MINOR_EVENT],
    [Event.AUDIO_OFF, EventCategory.MINOR_EVENT],
    [Event.VIDEO_ON, EventCategory.MINOR_EVENT],
    [Event.VIDEO_OFF, EventCategory.MINOR_EVENT],
    [Event.PARTICIPANT_ROLE, EventCategory.MINOR_EVENT],
    [Event.PING_STAT, EventCategory.MAJOR_EVENT],
    [Event.DISCONNECT, EventCategory.MAJOR_EVENT],
    [Event.RECONNECT_ATTEMPT, EventCategory.MAJOR_EVENT],
    [Event.SCREENSHARE_START_REQUESTED, EventCategory.MINOR_EVENT],
    [Event.SCREENSHARE_STARTED, EventCategory.MINOR_EVENT],
    [Event.SCREENSHARE_STOPPED, EventCategory.MINOR_EVENT],
    [Event.TAB_CHANGE, EventCategory.MINOR_EVENT],
    [Event.BROWSER_BACKGROUNDED, EventCategory.MINOR_EVENT],
    [Event.BROWSER_FOREGROUNDED, EventCategory.MINOR_EVENT],
    [Event.DOMINANT_SPEAKER, EventCategory.MINOR_EVENT],
    [Event.AUDIO_DEVICES_UPDATES, EventCategory.MINOR_EVENT],
    [Event.VIDEO_DEVICES_UPDATES, EventCategory.MINOR_EVENT],
    [Event.SPEAKER_DEVICES_UPDATES, EventCategory.MINOR_EVENT],
    [Event.SELECTED_MICROHPONE_UPDATE, EventCategory.MINOR_EVENT],
    [Event.SELECTED_CAMERA_UPDATE, EventCategory.MINOR_EVENT],
    [Event.SELECTED_SPEAKER_UPDATE, EventCategory.MINOR_EVENT],
    [Event.MEDIA_PERMISSION, EventCategory.MINOR_EVENT],
    [Event.LEGACY_SWITCH, EventCategory.MINOR_EVENT],
    [Event.AUDIO_PLAY_FAILED, EventCategory.MINOR_EVENT],
    [Event.VIDEO_PLAY_FAILED, EventCategory.MINOR_EVENT],
    [Event.AUDIO_TRACK_MUTED, EventCategory.MINOR_EVENT],
    [Event.VIDEO_TRACK_MUTED, EventCategory.MINOR_EVENT],
]);
export function mergeChunks(chunks) {
    const chunk = {
        entries: [],
    };
    // console.log(`=> chunk length:`, chunks.length);
    for (let i = 0; i < chunks.length; i += 1) {
        // console.log(`=> chunk:`, chunks[i]);
        chunk.entries = chunk.entries.concat(chunks[i].entries);
    }
    return chunk;
}
