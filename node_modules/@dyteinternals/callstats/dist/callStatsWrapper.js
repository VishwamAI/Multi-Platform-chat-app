/* eslint-disable no-unused-expressions */
import EventEmitter from 'events';
import { ClientEnvType, } from './types';
import CallStats from './callStats';
class InhouseCallStats extends EventEmitter {
    stats;
    roomURL;
    peerId;
    backend;
    iceServers;
    initialized = false;
    stalled = false; // Initialization will never occur
    ipInformation;
    logger;
    async initialize({ peerId, engineName, env = ClientEnvType.PRODUCTION, iceServers, apiBase = 'https://api.cluster.dyte.in', flags, logger = console, }) {
        try {
            this.peerId = peerId;
            this.logger = logger;
            this.backend = new CallStats(apiBase, engineName, env, flags, logger, peerId);
            this.backend.eventHandler.on('initialized', (e) => {
                this.ipInformation = e;
                this.initialized = true;
                this.emit('initialized', e);
            });
            this.backend?.authenticate({ peerId });
            this.iceServers = iceServers;
            this.backend?.registerIceServers(this.iceServers);
            this.startPreCallTest();
        }
        catch (error) {
            // eslint-disable-next-line no-console
            this.logger.error('callStats::CallStatsIntegration: ', { error: { reason: error.reason } });
            this.stallCallStats();
        }
    }
    setRoomName(roomName) {
        this.roomURL = roomName;
    }
    configureSendTransport(sendTransport) {
        this.backend?.registerProducingTransport(sendTransport);
    }
    configureRecvTransport(recvTransport) {
        this.backend?.registerConsumingTransport(recvTransport);
    }
    async candidateRegionalNetworkQualityTest(regionalIceServersInfo) {
        try {
            this.backend?.sendNetworkQualityTestBeginEvent(regionalIceServersInfo);
        }
        catch (ex) {
            // eslint-disable-next-line no-console
            this.logger.error('callStats::sendNetworkQualityTestBeginEvent', { error: { reason: ex.reason } });
        }
    }
    async roomJoined(peerData) {
        this.backend?.sendCallJoinBeginEvent(peerData);
        if (this.backend) {
            // this.candidateRegionalNetworkQualityTest();
        }
        this.backend?.startPingStats();
    }
    audioOff() {
        this.backend?.sendAudioToggleEvent(false);
    }
    audioOn() {
        this.backend?.sendAudioToggleEvent(true);
    }
    videoOff() {
        this.backend?.sendVideoToggleEvent(false);
    }
    videoOn() {
        this.backend?.sendVideoToggleEvent(true);
    }
    callEnded() {
        this.backend?.stopPingStats();
        this.backend?.sendDisconnectEvent();
    }
    screenShareStart(ssrc) {
        this.backend?.sendScreenShareToggleEvent(true, ssrc);
    }
    consumerSharedMediaState(consumerId, statusObj) {
        this.backend?.sendConsumerSharedMediaStateEvent(consumerId, statusObj);
    }
    screenShareStop(ssrc) {
        this.backend?.sendScreenShareToggleEvent(false, ssrc);
    }
    screenShareRequested() {
        this.backend?.sendScreenShareRequestedEvent();
    }
    activeSpeaker(peerId) {
        if (peerId !== this.peerId) {
            return;
        }
        this.backend?.sendActiveSpeakerEvent(peerId);
    }
    devices(deviceType, deviceList) {
        this.backend?.devices(deviceType, deviceList);
    }
    selectedDevice(deviceType, device) {
        this.backend?.selectedDevice(deviceType, device);
    }
    mediaPermission(deviceType, permission) {
        this.backend?.mediaPermission(deviceType, permission);
    }
    mediaPlaybackFailed(deviceType) {
        this.backend?.mediaPlaybackFailed(deviceType);
    }
    mediaTrackMuted(deviceType) {
        this.backend?.mediaTrackMuted(deviceType);
    }
    tabChanged(isMeetingsTabActive = false) {
        this.backend?.tabChanged(isMeetingsTabActive);
    }
    browserBackgrounded() {
        this.backend?.browserBackgrounded();
    }
    browserForegrounded() {
        this.backend?.browserForegrounded();
    }
    legacySwitch(on) {
        this.backend?.legacySwitch(on);
    }
    async startPreCallTest() {
        this.backend?.sendPreCallTestBeginEvent();
    }
    onPreCallTestResults(fx) {
        this.backend?.eventHandler.once('precall_end', fx);
        return fx;
    }
    onReceivingConsumerAudioStatus(fx) {
        this.backend?.eventHandler.on('consumer_audio_status', fx);
    }
    onReceivingConsumerVideoStatus(fx) {
        this.backend?.eventHandler.on('consumer_video_status', fx);
    }
    onReceivingProducerAudioStatus(fx) {
        this.backend?.eventHandler.on('producer_audio_status', fx);
    }
    onReceivingProducerVideoStatus(fx) {
        this.backend?.eventHandler.on('producer_video_status', fx);
    }
    onReceivingProducingTransportStatus(fx) {
        this.backend?.eventHandler.on('producing_transport_status', fx);
    }
    onReceivingConsumingTransportStatus(fx) {
        this.backend?.eventHandler.on('consuming_transport_status', fx);
    }
    onSafeInitialization(cb) {
        if (this.initialized) {
            cb(this.ipInformation, false);
        }
        else if (!this.stalled) {
            const eventEmitterCB = (ipInfo) => {
                const isAsyncInitialization = true;
                cb(ipInfo, isAsyncInitialization);
            };
            this.once('initialized', eventEmitterCB);
            return eventEmitterCB;
        }
        return () => { };
    }
    removeInitializationListener(fx) {
        this.removeListener('initialized', fx);
    }
    stallCallStats() {
        this.stalled = true;
        this.removeAllListeners('initialized');
    }
}
const callStats = new InhouseCallStats();
callStats.setMaxListeners(30);
export default callStats;
export function createCallStatsInstance() {
    return new InhouseCallStats();
}
