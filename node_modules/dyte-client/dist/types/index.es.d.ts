/// <reference types="node" />
/* eslint-disable react/destructuring-assignment */
/* eslint-disable max-classes-per-file */
import React from "react";
import { ReactNode } from "react";
import EventEmitter$0 from "events";
import { EventEmitter } from "events";
/* eslint-disable no-underscore-dangle */
/* eslint-disable no-case-declarations */
import { Dispatch } from "redux";
import { Socket } from "socket.io-client";
interface ButtonProp {
    icon: HTMLElement | ReactNode;
    label: string;
    position: string;
    onClick: Function;
    type?: "popover";
    url?: string;
}
declare class DyteControlBar {
    buttons: any[];
    _setButtons: any;
    addButton(button: ButtonProp): number;
    removeButton(button: number): void;
}
declare enum Layout {
    MULTI = "MULTI",
    HIGHLIGHTED = "HIGHLIGHTED",
    SINGLE = "SINGLE"
}
type GridConfig = {
    layout?: string | Layout;
    participantVideo?: {
        fit?: "contain";
        controlButton?: {
            icon: HTMLElement | ReactNode;
            onClick: () => void;
        };
    };
};
declare class DyteGrid {
    layouts: typeof Layout;
    private participantVideoConfiguration;
    constructor();
    update(gridConfig: GridConfig): void;
    setOverlay(element: ReactNode | string, timeout?: number): void;
}
/* eslint-disable class-methods-use-this */
/* eslint-disable no-underscore-dangle */
// eslint-disable-next-line max-classes-per-file
declare class DyteBaseParticipant {
    id: string;
    name: string;
    audioEnabled: any;
    picture: any;
    isMe: any;
    isPinned: any;
    videoEnabled: any;
    videoTrack: any;
    audioTrack: any;
    protected _participantHook: any;
    clientSpecificId: any;
    metadata: {
        view_type: string;
        preset_name: string;
    };
    _update(peer: any, hook: any): void;
    pin(): void;
    unpin(): void;
    updateRole(roleName: string): void;
    updatePreset(presetName: string): void;
}
declare class DyteParticipant extends DyteBaseParticipant {
    private _sendMessage;
    sendMessage(message: object): void;
    addControl(control: any): void;
    removeControl(control: any): void;
    disableAudio(): void;
    disableVideo(): void;
    setOverlay(element: any): void;
    zoom({ scale, x, y }: {
        scale: any;
        x: any;
        y: any;
    }): void;
    setLabel(label: string): void;
}
declare class DyteSelfParticipant extends DyteBaseParticipant {
    isScreensharing: any;
    _videoHook: any;
    isPresenting: any;
    _update(peer: any, hook: any): void;
    enableAudio(): void;
    enableVideo(): void;
    disableAudio(): void;
    disableVideo(): void;
    enableScreenshare(): void;
    disableScreenshare(): void;
    setOverlay(element: any): void;
    zoom({ scale, x, y }: {
        scale: any;
        x: any;
        y: any;
    }): void;
    startPresenting(): void;
    stopPresenting(): void;
}
interface Plugin {
    id: string;
    name: string;
    picture: string;
    version: string;
    staggered: boolean;
    type: "third_party" | "self_hosted";
    description: string;
    baseURL: string;
    authToken: string;
    tags: string[];
    enabledBy?: string;
    ACLAccessGrantedUsers?: string[];
    ACLAccessRemovedUsers?: string[];
    ACLType?: string;
}
interface PluginViewFrame {
    url: string;
    plugin: string; // plugin ID
    view: string; // view ID
}
type WebsocketMessage = {
    type: string;
    payload?: any;
};
type ContextObj = {
    socket: Socket;
    sendMessage: (message: WebsocketMessage, callBack?: (message: WebsocketMessage) => void) => Promise<WebsocketMessage>;
    emitter: EventEmitter;
    roomURL: string;
};
type SocketContext = ContextObj;
declare class PluginManager {
    socketObj: SocketContext;
    dispatch: Dispatch;
    roomName: string;
    plugins: {
        [pluginId: string]: Plugin;
    };
    peerId: string;
    iframes: {
        [pluginId: string]: {
            [viewId: string]: {
                iframe: HTMLIFrameElement;
                listener: (message: any) => any;
            };
        };
    };
    authToken: String;
    meeting: Meeting;
    constructor(socketObj: SocketContext, roomName: string, dispatch: Dispatch, peerId: string, authToken: string, meeting: Meeting);
    private handleSockets;
    broadcastIframeEvent(message: any): void;
    sendIframeEvent(message: any): void;
    listenSocketEvents(): Promise<void>;
    getRoomPlugins(): Promise<void>;
    enablePlugin(plugin: Pick<Plugin, "id" | "enabledBy" | "ACLAccessGrantedUsers" | "ACLAccessRemovedUsers">): Promise<void>;
    disablePlugin(plugin: Pick<Plugin, "id">): Promise<void>;
    private getEnabledByPeerId;
    handleIframeMessage(message: any): Promise<void>;
    addIframeView(frame: PluginViewFrame, element: HTMLIFrameElement): Promise<void>;
    removeIframeView(frame: PluginViewFrame): Promise<void>;
    addRoomPlugin(plugin: Pick<Plugin, "id" | "staggered" | "ACLType">): Promise<void>;
    removeRoomPlugin(plugin: Pick<Plugin, "id">): Promise<WebsocketMessage>;
}
declare class DytePlugin extends EventEmitter$0 {
    isActivated: boolean;
    data: any[];
    private manager;
    private plugin;
    constructor(p: Plugin, manager: PluginManager);
    get id(): string;
    get name(): string;
    get ACLType(): string;
    get staggered(): boolean;
    activate(): void;
    deactivate(): void;
    sendData(data: any): void;
}
declare enum MessageTypes {
    text = 0,
    image = 1,
    file = 2,
    poll = 3
}
interface ChatMessageBase {
    userId: string;
    displayName: string;
    read?: boolean;
    pluginId?: string; // If this message is from a plugin, then the plugin'd id, otherwise null.
    time: number;
}
interface TextMessage extends ChatMessageBase {
    type: MessageTypes.text;
    message: string;
}
interface ImageMessage extends ChatMessageBase {
    type: MessageTypes.image;
    link: string;
}
interface FileMessage extends ChatMessageBase {
    type: MessageTypes.file;
    name: string;
    size: number;
    link: string;
}
interface PollMessage extends ChatMessageBase {
    type: MessageTypes.poll;
    pollId: string;
}
type ChatMessage = TextMessage | ImageMessage | FileMessage | PollMessage;
/* eslint-disable camelcase */
type ThemeControlBarElement = {
    plugins?: boolean;
    screenshare?: boolean;
    invite?: boolean;
    participants?: boolean;
    chat?: boolean;
    reactions?: boolean;
    polls?: boolean;
    fullscreen?: boolean;
    layout?: boolean;
};
type ThemeControlBar = {
    is_enabled: boolean;
    elements?: ThemeControlBarElement;
};
type ThemeWaitingRoom = {
    is_enabled: boolean;
    enable_preview?: boolean;
    element?: HTMLElement | string;
};
type ThemeHeader = {
    is_enabled: boolean;
    elements?: ThemeHeaderElement;
};
type ThemeHeaderElement = {
    timer?: boolean;
    title?: boolean;
    logo?: string;
    participant_count?: boolean;
    change_layout?: boolean;
};
type ThemeControls = {
    pip_toggle?: boolean;
};
type ThemeColor = {
    primary: string;
    secondary: string;
    text: string;
    background: string;
    textPrimary?: string;
    videoBackground?: string;
};
type ThemeDimention = {
    width?: number;
    height?: number;
    mode?: string;
};
declare enum WaitingRoomTypes {
    skip = "SKIP",
    onAccept = "ON_ACCEPT",
    skipOnPrivilegedUserEntry = "SKIP_ON_PRIVILEGED_USER_ENTRY",
    skipOnAccept = "SKIP_ON_ACCEPT" // should be removed later
}
type PluginConfig = {
    defaultAccess: "blacklist" | "whitelist";
    handlesViewOnly?: boolean;
};
type PluginPermissionsTypes = {
    can_close: boolean;
    can_start: boolean;
    can_edit_acl?: boolean;
    config?: {
        [pluginId: string]: PluginConfig;
    };
};
type PollsPermissionsTypes = {
    can_create: boolean;
    can_vote: boolean;
    can_view: boolean;
};
type ProducePermissionsTypes = {
    video: StreamPermissionTypes;
    audio: boolean;
    screenshare: StreamPermissionTypes;
};
type StreamPermissionTypes = {
    allow: boolean;
    quality: "hd" | "vga" | "qvga" | "full";
    frame_rate: number;
};
type ChatPermissionTypes = {
    public: PublicChatPermissionTypes;
    private?: PrivateChatPermissionTypes;
};
type PublicChatPermissionTypes = {
    can_send: boolean;
    text: boolean;
    files: boolean;
};
type PrivateChatPermissionTypes = {
    can_send: boolean;
    can_receive: boolean;
    text: boolean;
    files: boolean;
};
declare enum DyteViewTypes {
    groupCall = "GROUP_CALL",
    webinar = "WEBINAR",
    audioRoom = "AUDIO_ROOM"
}
type AloneHereType = {
    is_enabled: boolean;
    element?: HTMLElement;
};
// main role type start
type RoleType = {
    accept_waiting_requests: boolean;
    accept_present_requests?: boolean;
    request_produce: boolean;
    can_allow_participant_audio: boolean;
    can_allow_participant_screensharing: boolean;
    can_allow_participant_video: boolean;
    request_kick_participant: boolean;
    kick_participant: boolean;
    pin_participant: boolean;
    can_record: boolean;
    can_edit_display_name: boolean;
    waiting_room_type: WaitingRoomTypes;
    plugins: PluginPermissionsTypes;
    polls: PollsPermissionsTypes;
    produce: ProducePermissionsTypes;
    chat: ChatPermissionTypes;
    reactions: boolean;
    hidden_participant?: boolean;
    is_recorder?: boolean;
    max_screenshare_count: number;
    show_participant_list: boolean;
    can_present: boolean;
    can_change_participant_role: boolean; // v2
    view_type: DyteViewTypes;
    can_change_theme?: boolean; // v2
};
type ThemeGridType = {
    multi: {
        maxVideoCount: number;
        videoFit: string;
    };
    single: {
        maxVideoCount: number;
        videoFit: string;
    };
    defaultView: string;
};
// main theme type
type ThemeBodyType = {
    setup_screen?: {
        is_enabled: boolean;
    };
    waiting_room?: ThemeWaitingRoom;
    control_bar?: ThemeControlBar;
    header?: ThemeHeader;
    colors?: ThemeColor;
    dimensions?: ThemeDimention;
    alone_here?: AloneHereType;
    pip_mode?: boolean; // v2
    plugins?: string[]; // v2
    auto_tune?: boolean;
    grid?: ThemeGridType;
    controls?: ThemeControls;
};
interface UIConfigTypes {
    waitingRoom?: {
        roomElement?: string | HTMLElement;
        showSelf?: boolean;
    };
    controlBar?: boolean;
    controlBarElements?: {
        plugins?: boolean;
        screenShare?: boolean;
        share?: boolean;
        participants?: boolean;
        chat?: boolean;
        polls?: boolean;
        fullscreen?: boolean;
    };
    header?: boolean;
    headerElements?: {
        clock?: boolean;
        title?: boolean;
        logo?: boolean;
        participantCount?: boolean;
    };
    aloneHereElement?: boolean;
    logo?: string;
    colors?: {
        primary: string;
        secondary: string;
        textPrimary: string;
        videoBackground: string;
        text?: string;
        background?: string;
    };
    dimensions?: {
        width?: number;
        height?: number;
        mode?: string;
    };
    grid?: {
        multi?: {
            maxVideoCount?: number;
            videoFit?: string;
        };
        single?: {
            maxVideoCount: number;
            videoFit: string;
        };
        defaultView?: string;
    };
}
declare enum WaitingRoomConversionToV1Type {
    SKIP = "skip",
    SKIP_ON_PRIVILEGED_USER_ENTRY = "skipOnPrivilegedUserEntry",
    ON_ACCEPT = "skipOnAccept"
}
interface PresetRoleV1Type {
    permissions: {
        acceptWaitingRequests: boolean;
        disableParticipantAudio: boolean;
        disableParticipantScreensharing: boolean;
        disableParticipantVideo: boolean;
        kickParticipants: boolean;
        pinParticipant: boolean;
        allowRecording?: boolean;
        editDisplayName?: boolean;
    };
    waitingRoom: WaitingRoomConversionToV1Type;
    plugins: {
        close: boolean;
        start: boolean;
        canEditAcl?: boolean;
    };
    pluginConfig?: {
        hostOnlyControl?: string[];
        handlesViewOnly?: string[];
    };
    produce: {
        video: boolean;
        audio: boolean;
        screenshare: boolean;
        polls: boolean;
        chat?: {
            text: boolean;
            files: boolean;
        };
        reactions: boolean;
    };
    flags?: {
        hiddenParticipant?: boolean;
        recorder?: boolean;
    };
    webinar?: {
        viewOnly: boolean;
        requestToJoinStage: boolean;
    };
}
declare namespace defaultPreset {
    /* eslint-disable camelcase */
    type ThemeControlBarElement = {
        plugins?: boolean;
        screenshare?: boolean;
        invite?: boolean;
        participants?: boolean;
        chat?: boolean;
        reactions?: boolean;
        polls?: boolean;
        fullscreen?: boolean;
        layout?: boolean;
    };
    type ThemeControlBar = {
        is_enabled: boolean;
        elements?: ThemeControlBarElement;
    };
    type ThemeWaitingRoom = {
        is_enabled: boolean;
        enable_preview?: boolean;
        element?: HTMLElement | string;
    };
    type ThemeHeader = {
        is_enabled: boolean;
        elements?: ThemeHeaderElement;
    };
    type ThemeHeaderElement = {
        timer?: boolean;
        title?: boolean;
        logo?: string;
        participant_count?: boolean;
        change_layout?: boolean;
    };
    type ThemeControls = {
        pip_toggle?: boolean;
    };
    type ThemeColor = {
        primary: string;
        secondary: string;
        text: string;
        background: string;
        textPrimary?: string;
        videoBackground?: string;
    };
    type ThemeDimention = {
        width?: number;
        height?: number;
        mode?: string;
    };
    enum WaitingRoomTypes {
        skip = "SKIP",
        onAccept = "ON_ACCEPT",
        skipOnPrivilegedUserEntry = "SKIP_ON_PRIVILEGED_USER_ENTRY",
        skipOnAccept = "SKIP_ON_ACCEPT" // should be removed later
    }
    type PluginConfig = {
        defaultAccess: "blacklist" | "whitelist";
        handlesViewOnly?: boolean;
    };
    type PluginPermissionsTypes = {
        can_close: boolean;
        can_start: boolean;
        can_edit_acl?: boolean;
        config?: {
            [pluginId: string]: PluginConfig;
        };
    };
    type PollsPermissionsTypes = {
        can_create: boolean;
        can_vote: boolean;
        can_view: boolean;
    };
    type ProducePermissionsTypes = {
        video: StreamPermissionTypes;
        audio: boolean;
        screenshare: StreamPermissionTypes;
    };
    type StreamPermissionTypes = {
        allow: boolean;
        quality: "hd" | "vga" | "qvga" | "full";
        frame_rate: number;
    };
    type ChatPermissionTypes = {
        public: PublicChatPermissionTypes;
        private?: PrivateChatPermissionTypes;
    };
    type PublicChatPermissionTypes = {
        can_send: boolean;
        text: boolean;
        files: boolean;
    };
    type PrivateChatPermissionTypes = {
        can_send: boolean;
        can_receive: boolean;
        text: boolean;
        files: boolean;
    };
    enum DyteViewTypes {
        groupCall = "GROUP_CALL",
        webinar = "WEBINAR",
        audioRoom = "AUDIO_ROOM"
    }
    type AloneHereType = {
        is_enabled: boolean;
        element?: HTMLElement;
    };
    // main role type start
    type RoleType = {
        accept_waiting_requests: boolean;
        accept_present_requests?: boolean;
        request_produce: boolean;
        can_allow_participant_audio: boolean;
        can_allow_participant_screensharing: boolean;
        can_allow_participant_video: boolean;
        request_kick_participant: boolean;
        kick_participant: boolean;
        pin_participant: boolean;
        can_record: boolean;
        can_edit_display_name: boolean;
        waiting_room_type: WaitingRoomTypes;
        plugins: PluginPermissionsTypes;
        polls: PollsPermissionsTypes;
        produce: ProducePermissionsTypes;
        chat: ChatPermissionTypes;
        reactions: boolean;
        hidden_participant?: boolean;
        is_recorder?: boolean;
        max_screenshare_count: number;
        show_participant_list: boolean;
        can_present: boolean;
        can_change_participant_role: boolean; // v2
        view_type: DyteViewTypes;
        can_change_theme?: boolean; // v2
    };
    type ThemeGridType = {
        multi: {
            maxVideoCount: number;
            videoFit: string;
        };
        single: {
            maxVideoCount: number;
            videoFit: string;
        };
        defaultView: string;
    };
    // main theme type
    type ThemeBodyType = {
        setup_screen?: {
            is_enabled: boolean;
        };
        waiting_room?: ThemeWaitingRoom;
        control_bar?: ThemeControlBar;
        header?: ThemeHeader;
        colors?: ThemeColor;
        dimensions?: ThemeDimention;
        alone_here?: AloneHereType;
        pip_mode?: boolean; // v2
        plugins?: string[]; // v2
        auto_tune?: boolean;
        grid?: ThemeGridType;
        controls?: ThemeControls;
    };
    // default config
    type DefaultDyteConfig = {
        theme: ThemeBodyType;
        permissions: RoleType;
        version?: string;
    };
    interface UIConfigTypes {
        waitingRoom?: {
            roomElement?: string | HTMLElement;
            showSelf?: boolean;
        };
        controlBar?: boolean;
        controlBarElements?: {
            plugins?: boolean;
            screenShare?: boolean;
            share?: boolean;
            participants?: boolean;
            chat?: boolean;
            polls?: boolean;
            fullscreen?: boolean;
        };
        header?: boolean;
        headerElements?: {
            clock?: boolean;
            title?: boolean;
            logo?: boolean;
            participantCount?: boolean;
        };
        aloneHereElement?: boolean;
        logo?: string;
        colors?: {
            primary: string;
            secondary: string;
            textPrimary: string;
            videoBackground: string;
            text?: string;
            background?: string;
        };
        dimensions?: {
            width?: number;
            height?: number;
            mode?: string;
        };
        grid?: {
            multi?: {
                maxVideoCount?: number;
                videoFit?: string;
            };
            single?: {
                maxVideoCount: number;
                videoFit: string;
            };
            defaultView?: string;
        };
    }
    enum WaitingRoomConversionToV1Type {
        SKIP = "skip",
        SKIP_ON_PRIVILEGED_USER_ENTRY = "skipOnPrivilegedUserEntry",
        ON_ACCEPT = "skipOnAccept"
    }
    interface PresetRoleV1Type {
        permissions: {
            acceptWaitingRequests: boolean;
            disableParticipantAudio: boolean;
            disableParticipantScreensharing: boolean;
            disableParticipantVideo: boolean;
            kickParticipants: boolean;
            pinParticipant: boolean;
            allowRecording?: boolean;
            editDisplayName?: boolean;
        };
        waitingRoom: WaitingRoomConversionToV1Type;
        plugins: {
            close: boolean;
            start: boolean;
            canEditAcl?: boolean;
        };
        pluginConfig?: {
            hostOnlyControl?: string[];
            handlesViewOnly?: string[];
        };
        produce: {
            video: boolean;
            audio: boolean;
            screenshare: boolean;
            polls: boolean;
            chat?: {
                text: boolean;
                files: boolean;
            };
            reactions: boolean;
        };
        flags?: {
            hiddenParticipant?: boolean;
            recorder?: boolean;
        };
        webinar?: {
            viewOnly: boolean;
            requestToJoinStage: boolean;
        };
    }
    interface PresetV1Type {
        role: PresetRoleV1Type;
        uiConfig: UIConfigTypes;
        roomViewType?: "webinar" | "audioRoom" | "groupCall";
    }
    const permissions: RoleType;
    const theme: ThemeBodyType;
}
interface DyteModule {
    type: "sidebar" | "button";
    icon: any;
    sidebarComponent?: {
        name: string;
        component: React.FunctionComponent;
    };
    contextComponent?: React.FunctionComponent;
    hidden?: boolean;
}
declare class DyteModules {
    private modules;
    getAll(): DyteModule[];
    add(module: DyteModule): void;
    initAndAdd(module: any, hide?: boolean): void;
}
declare enum StageSidebarView {
    Chat = "Chat",
    Polls = "Polls",
    Participants = "Participants",
    Plugins = "Plugins",
    None = "None"
}
interface DyteConnectionConfig {
    clientId: string;
    roomName: string;
    authToken: string;
    autoTune?: boolean;
    endpoints: any;
    apiBase?: string;
    lang?: string;
    devicePreferences?: {
        camera?: {
            facing?: string;
        };
    };
    useShadowDOM?: boolean;
}
declare enum Events {
    participantJoin = "participantJoin",
    participantLeave = "participantLeave",
    disconnect = "disconnect",
    connect = "connect",
    meetingEnded = "meetingEnded",
    roomMessage = "roomMessage",
    chatMessage = "chatMessage",
    message = "message",
    meetingJoined = "meetingJoined",
    activeSpeaker = "activeSpeaker",
    recordingStarted = "recordingStarted",
    recordingStopped = "recordingStopped",
    participantVideoZoomed = "participantVideoZoomed",
    localMediaConnected = "localMediaConnected",
    screenSharingUpdated = "screenSharingUpdated",
    audioUpdated = "audioUpdated",
    videoUpdated = "videoUpdated"
}
type SessionConfig = {
    theme: ThemeBodyType;
    permissions: RoleType;
};
interface ConnectionEvents {
    [Events.participantJoin]: (participant: DyteParticipant) => any;
    [Events.participantLeave]: (participant: DyteParticipant) => any;
    [Events.disconnect]: () => any;
    [Events.connect]: () => any;
    [Events.meetingEnded]: ({ kicked: string }: {
        kicked: any;
    }) => any;
    [Events.meetingJoined]: () => any;
    [Events.chatMessage]: (message: ChatMessage) => any;
    [Events.message]: (data: any) => any;
    [Events.roomMessage]: (data: any) => any;
    [Events.activeSpeaker]: (participant: DyteParticipant | DyteSelfParticipant) => any;
    [Events.recordingStarted]: () => any;
    [Events.recordingStopped]: () => any;
    [Events.participantVideoZoomed]: (payload: {
        participant: DyteParticipant;
        zoom: {
            scale: number;
            x: number;
            y: number;
        };
    }) => any;
    [Events.localMediaConnected]: () => any;
    [Events.screenSharingUpdated]: (isScreensharing: boolean) => any;
    [Events.audioUpdated]: (audioEnabled: boolean) => any;
    [Events.videoUpdated]: (videoEnabled: boolean) => any;
}
interface Meeting {
    on<U extends keyof ConnectionEvents>(event: U, listener: ConnectionEvents[U]): this;
    emit<U extends keyof ConnectionEvents>(event: U, ...args: Parameters<ConnectionEvents[U]>): boolean;
}
// eslint-disable-next-line no-redeclare
declare class Meeting extends EventEmitter {
    connectionConfig: DyteConnectionConfig;
    config: SessionConfig;
    controlBar: DyteControlBar;
    grid: DyteGrid;
    participants: Array<DyteSelfParticipant | DyteParticipant>;
    self: DyteSelfParticipant;
    plugins: DytePlugin[];
    Events: typeof Events;
    _setUIConfig: any;
    _onError: any;
    _controlsHook: any;
    showSetupScreen: boolean;
    leaveRoom: () => void;
    kickAll: () => void;
    activeSidebarTab: StageSidebarView;
    openChatView: () => void;
    closeChatView: () => void;
    kick: (peerId: string) => void;
    enablePiP: () => void;
    disablePiP: () => void;
    isPiPEnabled: boolean;
    modules: DyteModules;
    _uiConfig: any;
    constructor(connectionConfig: DyteConnectionConfig, uiConfig?: UIConfigTypes);
    updateUIConfig(config: UIConfigTypes): void;
    addParticipantControl(control: any): void;
    sendRoomMessage(message: any): void;
    sendMessage(peerId: string, message: any): void;
    createPopup(element: ReactNode): void;
    closePopup(): void;
    onError(_onError: any): void;
    onSocketMessage(message: WebsocketMessage): void;
    _addUpdateParticipant(peer: any, hook: any): void;
    _removeParticipant(peer: any): void;
    private _render;
    init(rootElem: any): void;
}
type Props$0 = {
    clientId: string;
    meetingConfig: {
        roomName: string;
        authToken: string;
        showSetupScreen?: boolean;
        autoTune?: boolean;
        apiBase?: string;
        devicePreferences?: {
            camera?: {
                facing?: string;
            };
        };
    };
    uiConfig?: UIConfigTypes;
    onInit: (DyteMeeting: Meeting) => void;
    onError?: (Errors: any) => void;
    lang?: string;
    useShadowDom?: boolean;
};
declare const _default: React.NamedExoticComponent<Props$0> & {
    readonly type: {
        (props: Props$0): JSX.Element;
        defaultProps: {
            uiConfig: any;
            onError: (e: any) => void;
            lang: any;
            useShadowDom: boolean;
        };
    };
} & {
    version: string;
};
declare const DyteMeeting: typeof _default;
declare enum DyteErrors {
    CLIENTID_INVALID = "CLIENTID_INVALID",
    MEETING_UNAUTHORIZED = "MEETING_UNAUTHORIZED",
    MEETING_NOTFOUND = "MEETING_NOTFOUND"
}
export { DyteErrors, DyteMeeting, Meeting };
